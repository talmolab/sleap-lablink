name: Destroy LabLink Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Type 'yes' to confirm destruction"
        required: true
        default: "no"
        type: string
      environment:
        description: "Environment to destroy (test or prod) - dev uses local state and should only be used locally"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - prod
      allocator_image_tag:
        description: "Docker image tag used in deployment (required for prod)"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    if: github.event.inputs.confirm_destroy == 'yes'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Validate and determine image tag
        id: resolve_image_tag
        run: |
          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            if [ -z "${{ github.event.inputs.allocator_image_tag }}" ]; then
              echo "Error: allocator_image_tag must be provided for prod destruction"
              exit 1
            fi
            echo "tag=${{ github.event.inputs.allocator_image_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=linux-amd64-latest-test" >> "$GITHUB_OUTPUT"
          fi

      - name: Terraform Init Client VMs
        working-directory: packages/allocator/src/lablink_allocator/terraform
        run: |
          # Extract bucket name from config.yaml
          BUCKET_NAME=$(grep "^bucket_name:" ../conf/config.yaml | awk '{print $2}' | tr -d '"')
          terraform init \
            -backend-config=backend-client-${{ github.event.inputs.environment }}.hcl \
            -backend-config="bucket=$BUCKET_NAME"

      - name: Extract Variable File
        working-directory: packages/allocator/src/lablink_allocator/terraform
        run: |
          # Extract bucket name from config.yaml
          BUCKET_NAME=$(grep "^bucket_name:" ../conf/config.yaml | awk '{print $2}' | tr -d '"')
          # Try to download tfvars, but don't fail if it doesn't exist (no VMs were created)
          if aws s3 cp s3://${BUCKET_NAME}/${{ github.event.inputs.environment }}/client/terraform.runtime.tfvars variables.tfvars 2>/dev/null; then
            echo "Found existing client VM state"
            echo "has_client_vms=true" >> "$GITHUB_ENV"
          else
            echo "No client VM state found - skipping client VM destruction"
            echo "has_client_vms=false" >> "$GITHUB_ENV"
          fi

      - name: Terraform Destroy Client VMs
        if: env.has_client_vms == 'true'
        continue-on-error: true
        working-directory: packages/allocator/src/lablink_allocator/terraform
        run: |
          terraform destroy -auto-approve -var-file=variables.tfvars

      - name: Terraform Init Infrastructure
        working-directory: lablink-infrastructure
        run: |
          # Extract bucket name from config.yaml for S3 backend
          BUCKET_NAME=$(grep "^bucket_name:" config/config.yaml | awk '{print $2}' | tr -d '"')
          terraform init \
            -backend-config=backend-${{ github.event.inputs.environment }}.hcl \
            -backend-config="bucket=$BUCKET_NAME"

      - name: Terraform Destroy Infrastructure
        working-directory: lablink-infrastructure
        run: |
          terraform destroy -auto-approve \
            -var="resource_suffix=${{ github.event.inputs.environment }}" \
            -var="allocator_image_tag=${{ steps.resolve_image_tag.outputs.tag }}" \
            -var-file="terraform.tfvars"
